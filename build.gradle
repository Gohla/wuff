buildscript {
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
  }
}

ext {
  group = 'org.akhikhl.wuff'
  version = '0.0.1'
  description = 'Gradle plugin for assembling eclipse applications'
  groovy_version = '1.8.6'
  spock_version = '0.7-groovy-1.8'
  logback_version = '1.1.1'
  slf4j_version = '1.7.6'
}

apply plugin: 'base' // add "clean" task to the root project.

task('build')

task('wrapper', type: Wrapper) {
  gradleVersion = '1.11'
}

task('buildExamples', type: GradleBuild) { task ->
  dir = file('examples')
  tasks = [ 'build' ]
}

task('cleanExamples', type: GradleBuild) { task ->
  dir = file('examples')
  tasks = [ 'clean' ]
}

tasks.clean.dependsOn tasks.cleanExamples

subprojects {
  if(project.parent.name != 'libs')
    return

  apply plugin: 'maven'
  apply plugin: 'groovy'
  apply plugin: 'signing'
  apply plugin: 'maven-publish'
  apply plugin: 'bintray'

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }

  group = rootProject.ext.group
  version = rootProject.ext.version

  dependencies {
    compile "org.codehaus.groovy:groovy-all:${rootProject.ext.groovy_version}"
    testCompile "org.spockframework:spock-core:${rootProject.ext.spock_version}"
  }

  // lib projects should be always installed into "$HOME/.m2"
  project.tasks.build.finalizedBy project.tasks.install
  rootProject.tasks.buildExamples.dependsOn project.tasks.install

  task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates sources jar') {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, description: 'Creates javadoc jar') {
    dependsOn javadoc
    classifier = 'javadoc'
    from javadoc.destinationDir
    if(tasks.findByName('groovydoc')) {
      dependsOn groovydoc
      from groovydoc.destinationDir
    }
  }

  artifacts {
    archives sourcesJar, javadocJar
  }

  if(project.hasProperty('publishToSonatype')) {

    assert project.hasProperty('signing.keyId')
    assert project.hasProperty('signing.password')
    assert project.hasProperty('signing.secretKeyRingFile')
    assert project.hasProperty('sonatypeUsername')
    assert project.hasProperty('sonatypePassword')

    signing {
      sign configurations.archives
    }

    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { deployment -> signing.signPom(deployment) }

          repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
          }

          pom.project {
            name project.name
            packaging 'jar'
            description rootProject.ext.description
            url 'https://github.com/akhikhl/wuff'

            scm {
              url 'scm:git@github.com:akhikhl/wuff.git'
              connection 'scm:git@github.com:akhikhl/wuff.git'
              developerConnection 'scm:git@github.com:akhikhl/wuff.git'
            }

            licenses {
              license {
                name 'The MIT License'
                url 'https://raw.github.com/akhikhl/wuff/master/license.txt'
                distribution 'repo'
              }
            }

            developers {
              developer {
                id 'akhikhl'
                name 'Andrey Hihlovskiy'
              }
            }
          }
        }
      }
    } // uploadArchives
  } // publishToSonatype

  // used by bintray
  publishing {
    publications {
      mavenAll(MavenPublication) {
        if (plugins.hasPlugin('java')) {
          from components.java
        }
        artifact sourcesJar {
          classifier "sources"
        }
        artifact javadocJar {
          classifier "javadoc"
        }
      }
    }
  } // publishing

  def rootProj = rootProject
  bintray {
    user = project.hasProperty('bintrayUser') ? project.bintrayUser : ''
    key = project.hasProperty('bintrayKey') ? project.bintrayKey : ''
    publications = ['mavenAll'] // When uploading Maven-based publication files
    pkg {
      repo = 'maven'
      name = 'wuff'
      desc = rootProj.ext.description
      licenses = ['MIT']
      labels = ['gradle', 'plugin', 'eclipse', 'rcp', 'osgi']
    }
    dryRun = false
  }
}

